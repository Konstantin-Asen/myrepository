#include <iostream>
using namespace std;
const int ROW = 3;
const int COL = 4;
void input(int[][COL], int, int);
void output(int[][COL], int, int);
void max_count(int[][COL], int, int, int&, int&);
void min_count(int[][COL], int, int, int&, int&);
void reduce_matrix(int[][COL], int, int, int[]);
void expand_vector(int[][COL], int, int, int[]);
void ascend_vector(int[], int);
void descend_vector(int[], int);
void print(int[], int);
int count_zero(int[][COL], int, int);
int sum_matrix(int[][COL], int, int);
void main()
{
	const int SIZE = ROW * COL;
	int matrix[ROW][COL];
	int matrix_6[ROW][COL];
	int vector[SIZE];
	int max, count_max, min, count_min;
	cout << "Function 1:\n===========" << endl;
	input(matrix, ROW, COL);
	cout << "\nFunction 2:\n===========" << endl;
	output(matrix, ROW, COL);
	cout << "\nFunction 3:\n===========" << endl;
	max_count(matrix, ROW, COL, max, count_max);
	cout << "Maximum element of the matrix: " << max << endl;
	cout << "Number of maximum encounters: " << count_max << endl;
	cout << "\nFunction 4:\n===========" << endl;
	min_count(matrix, ROW, COL, min, count_min);
	cout << "Minimum element of the matrix: " << min << endl;
	cout << "Number of minimum encounters: " << count_min << endl;
	cout << "\nFunction 5:\n===========" << endl;
	reduce_matrix(matrix, ROW, COL, vector);
	cout << "\n\nFunction 6:\n===========" << endl;
	expand_vector(matrix_6, ROW, COL, vector);
	output(matrix_6, ROW, COL);
	cout << "\n\nFunction 7:\n===========" << endl;
	ascend_vector(vector, SIZE);
	print(vector, SIZE);
	cout << "\nFunction 8:\n===========" << endl;
	descend_vector(vector, SIZE);
	print(vector, SIZE);
	cout << "\nFunction 9:\n===========" << endl;
	cout << "Number of elements with a value of 0: " << count_zero(matrix, ROW, COL) << endl;
	cout << "\nFunction 10:\n===========" << endl;
	cout << "Sum of all matrix elements: " << sum_matrix(matrix, ROW, COL) << endl;
}
void input(int matr[][COL], int row, int col) {
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			cout << "Element[" << (i + 1) << "][" << (j + 1) << "] = ";
			cin >> matr[i][j];
		}
	}
}
void output(int matr[][COL], int row, int col) {
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			cout << "\t" << matr[i][j];
		}
		cout << endl;
	}
}
void max_count(int matr[][COL], int row, int col, int& max, int& count) {
	max = matr[0][0];
	count = 0;
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			if (matr[i][j] > max) max = matr[i][j];
		}
	}
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			if (matr[i][j] == max) count++;
		}
	}
}
void min_count(int matr[][COL], int row, int col, int& min, int& count) {
	min = matr[0][0];
	count = 0;
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			if (matr[i][j] < min) min = matr[i][j];
		}
	}
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			if (matr[i][j] == min) count++;
		}
	}
}
void reduce_matrix(int matr[][COL], int row, int col, int arr[]) {
	int size = 0;
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			arr[size] = matr[i][j];
			cout << arr[size] << " ";
			size++;
		}
	}
}
void expand_vector(int matr[][COL], int row, int col, int arr[]) {
	int size = 0;
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			matr[i][j] = arr[size];
			size++;
		}
	}
}
void ascend_vector(int arr[], int size) {
	int swap;
	for (int i = 0; i < size - 1; i++) {
		for (int j = 0; j < size - i - 1; j++) {
			if (arr[j] > arr[j + 1]) {
				swap = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = swap;
			}
		}
	}
}
void descend_vector(int arr[], int size) {
	int swap;
	for (int i = 0; i < size - 1; i++) {
		for (int j = 0; j < size - i - 1; j++) {
			if (arr[j] < arr[j + 1]) {
				swap = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = swap;
			}
		}
	}
}
int count_zero(int matr[][COL], int row, int col) {
	int count = 0;
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			if (matr[i][j] == 0) count++;
		}
	}
	return count;
}
int sum_matrix(int matr[][COL], int row, int col) {
	int sum_var = 0;
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			sum_var += matr[i][j];
		}
	}
	return sum_var;
}
void print(int arr[], int size) {
	for (int i = 0; i < size; i++) {
		cout << arr[i] << " ";
	}
	cout << endl;
}
